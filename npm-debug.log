0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/Cellar/node/7.0.0/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.10.8
3 info using node@v7.0.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/mccallalexander/source/projects/hive',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/mccallalexander/.npm/hivex/1.0.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/mccallalexander/.npm correctMkdir not in flight; initializing
10 info lifecycle hivex@1.0.0~prepublish: hivex@1.0.0
11 silly lifecycle hivex@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/mccallalexander/.npm/hivex/1.0.0/package.tgz',
12 verbose tar pack   '/Users/mccallalexander/source/projects/hive' ]
13 verbose tarball /Users/mccallalexander/.npm/hivex/1.0.0/package.tgz
14 verbose folder /Users/mccallalexander/source/projects/hive
15 verbose addLocalTarball adding from inside cache /Users/mccallalexander/.npm/hivex/1.0.0/package.tgz
16 verbose correctMkdir /Users/mccallalexander/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd hivex@1.0.0
18 verbose afterAdd /Users/mccallalexander/.npm/hivex/1.0.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/mccallalexander/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/mccallalexander/.npm/hivex/1.0.0/package/package.json written
21 silly publish { name: 'hivex',
21 silly publish   version: '1.0.0',
21 silly publish   description: 'React state management, for humans.',
21 silly publish   main: 'index.js',
21 silly publish   repository:
21 silly publish    { url: 'git+https://github.com/mccallofthewild/hive.git',
21 silly publish      type: 'git' },
21 silly publish   author:
21 silly publish    { name: 'McCall Alexander',
21 silly publish      email: 'mccallalexander96@gmail.com' },
21 silly publish   license: 'MIT',
21 silly publish   devDependencies:
21 silly publish    { 'babel-cli': '^6.24.0',
21 silly publish      'babel-plugin-transform-object-rest-spread': '^6.23.0',
21 silly publish      'babel-preset-es2015': '^6.24.0',
21 silly publish      'babel-preset-stage-2': '^6.22.0' },
21 silly publish   readme: '# Hivex\n\n The minimalist state management system for React Native. \n \n----------\n\n### Getting Started\n\n`npm install hivex`\n\n> Your Hivex store will be a single, all-encapsulating object with the properties `state`, `setters`, and `actions`. \n\n#### State\nState is the most important property in the Hivex store. It holds all your data.\nTo implement it in your store:\n``` babel\n\t// ./store.js\n\t\n\timport Hivex from \'hivex\'\n\t\n\tconst store = {\n\t\tstate:{\n\t\t\ttodos:[\n\t\t\t\t"take out the trash",\n\t\t\t\t"clean room",\n\t\t\t\t"feed dog"\n\t\t\t],\n\t\t\ttime:Date.now()\n\t\t}\n\t}\n\n\texport default new Hivex(store);\n```\nOur data here is kind of pointless if we can\'t access it. Accessing Hivex state from a React Component is simple:\n``` babel \n\t// ./my-component.js\n\timport store from \'./store.js\'\n\texport default class GoalSetter extends Component {\n\t\tconstructor(props){\n\t\t   super(props);\n\t\t    this.state = {\n\t\t      ...store.openState([\'todos\'], this),\n\t\t    }\n\t\t}\n\t\t/*\n\t\tSOME OTHER CODE\n\t\t*/\n\t}\n```\n`store.openState` allows you to access your store\'s state as if it were inside your component. \ne.g. `this.state.todos`\nThe second argument is always `this`.  It essentially tells Hivex to watch our component and update its state upon change. \n#### Setters\nThis is great, but we should be able to change state too. In Hivex, state is mutated with setter functions.\nDefining setters isn\'t much different than defining state:\n``` babel\n\t// ./store.js\n\t\n\timport Hivex from \'hivex\'\n\t\n\tconst store = {\n\t\tstate:{\n\t\t\ttodos:[\n\t\t\t\t"take out the trash",\n\t\t\t\t"clean room",\n\t\t\t\t"feed dog"\n\t\t\t],\n\t\t\ttime:Date.now()\n\t\t},\n\t\t\n\t\tsetters:{\n\t\t\taddTodo(state, payload){\n\t\t\t\tlet todo = payload.data;\n\t\t\t\tstate.todos.push(todo);\n\t\t\t},\n\t\t\tremoveTodo(state, payload){\n\t\t\t\tlet index = payload.data;\n\t\t\t\tstate.todos.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\texport default new Hivex(store);\n```\n`payload` is the object which contains all the data you would like to pass to your setter.\nTo run a setter function, use the `change` method, which takes in the function name and its payload: \n``` babel \n\t// ./my-component.js\n\timport store from \'./store.js\'\n\texport default class GoalSetter extends Component {\n\t\tconstructor(props){\n\t\t   super(props);\n\t\t    this.state = {\n\t\t      ...store.openState([\'todos\'], this),\n\t\t    }\n\t\t}\n\t\tsendTodo(text){\n\t\t\tstore.change(\'addTodo\', { data: text })\n\t\t}\n\t\t\n\t\tdeleteTodo(text){\n\t\t\tstore.change(\'removeTodo\', { data: text })\n\t\t}\n\t\t/*\n\t\tSOME OTHER CODE \n\t\t*/\n\t}\n```\n\n#### Actions\nSetters are great, but they update your components synchronously. This means if changing your data asynchronously e.g.  API calls, sockets, or setTimeouts, your component could be updated before your state changes.\n\nTo solve this problem, we have actions. Hivex actions handle all asynchronous activity in the store.\n\nLet\'s say you someone has to feed their dog, but not for another hour. We\'ll use a `setTimeout` to add this todo to the list in 45 minutes: \n``` babel\n\t// ./store.js\n\t\n\timport Hivex from \'hivex\'\n\t\n\tconst store = {\n\t\tstate:{\n\t\t\ttodos:[\n\t\t\t\t"take out the trash",\n\t\t\t\t"clean room",\n\t\t\t\t"feed dog"\n\t\t\t],\n\t\t\ttime:Date.now()\n\t\t},\n\t\t\n\t\tsetters:{\n\t\t\taddTodo(state, payload){\n\t\t\t\tlet todo = payload.data;\n\t\t\t\tstate.todos.push(todo);\n\t\t\t},\n\t\t\tremoveTodo(state, payload){\n\t\t\t\tlet index = payload.data;\n\t\t\t\tstate.todos.splice(index, 1);\n\t\t\t}\n\t\t},\n\t\t\n\t\tactions:{\n\t\t\twaitToAddTodo({change, access, resolve, reject}, payload){\n\t\t\t\tlet waitTime = payload.waitTime;\n\t\t\t\tlet todo = payload.todo;\n\t\t\t\tlet timeout = setTimeout(()=>{\n\t\t\t\t\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\texport default new Hivex(store);\n```',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '17250b8f7820786453e69c64f20a8dd1b06fd761',
21 silly publish   bugs: { url: 'https://github.com/mccallofthewild/hive/issues' },
21 silly publish   homepage: 'https://github.com/mccallofthewild/hive#readme',
21 silly publish   _id: 'hivex@1.0.0',
21 silly publish   scripts: {},
21 silly publish   _shasum: 'b1799bff0a01f4873c027a5392a6ee9e3013fad1',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name hivex
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'hivex',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'hivex',
26 silly mapToRegistry   name: 'hivex',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/hivex
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/mccallalexander/.npm/hivex/1.0.0/package.tgz
30 verbose request uri https://registry.npmjs.org/hivex
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 8:48:57 PM
33 verbose request using bearer token for auth
34 verbose request id 27f427a8c4a8f241
35 http request PUT https://registry.npmjs.org/hivex
36 http 403 https://registry.npmjs.org/hivex
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Sat, 25 Mar 2017 02:48:58 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-sea1049-SEA',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1490410138.038643,VS0,VE96',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/mccallalexander/.npm/registry.npmjs.org/hivex on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : hivex
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1044:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:965:12)
41 verbose statusCode 403
42 verbose pkgid hivex
43 verbose cwd /Users/mccallalexander/source/projects/hive
44 error Darwin 16.4.0
45 error argv "/usr/local/Cellar/node/7.0.0/bin/node" "/usr/local/bin/npm" "publish"
46 error node v7.0.0
47 error npm  v3.10.8
48 error code E403
49 error "You cannot publish over the previously published version 1.0.0." : hivex
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
